# RUN: llc -mtriple=x86_64-- --yk-stackmap-add-locs %s -o - | FileCheck %s

# Check that additional locations are only added to stackmaps if those
# locations are valid on all paths this block is in. Here, for example, there's
# an additional location `-8` for `$r13` in `bb.1`. However, `bb.1` is in a
# loop which later overwrites `$r13`. On the next iteration the additional
# location `-8` would no longer be valid for `$r13` and thus needs to be
# removed.

# CHECK-LABEL: __LLVM_StackMaps:
# Check STACKMAP tracked registers
# CHECK: .quad  41
# CHECK: .short 13
# CHECK: .short 14


# Check PATCHPOINT tracked registers
# CHECK: .quad 42
# CHECK-NOT: .short 5
# CHECK-NOT: .short 4
# CHECK-NOT: .short 2
# CHECK: .short 6
# CHECK: .long -48
# CHECK: .short 12
# CHECK: .short 15
# CHECK: .short 13
# CHECK: .short 14
# CHECK: .short 3

---
name: main
tracksRegLiveness: true
frameInfo:
  hasStackMap:     true
  stackSize:       24
stack:
  - { id: 0, type: spill-slot, offset: -8, size: 8, alignment: 8 }
  - { id: 1, type: spill-slot, offset: -16, size: 8, alignment: 8 }
  - { id: 2, type: spill-slot, offset: -24, size: 8, alignment: 8 }
body: |
  bb.0:
    successors: %bb.1
    $rbp = frame-setup MOV64rr $rsp
    $r13 = MOV64rm $rbp, 1, $noreg, -8, $noreg :: (load (s64) from %stack.0)
    $r14 = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %stack.0)
    JMP_1 %bb.1

  bb.1:
  ; predecessors: %bb.0, %bb.2
    liveins: $r13, $r14
    STACKMAP 41, 0, $r13, $r14, 3
    JMP_1 %bb.2

  bb.2:
  ; predecessors: %bb.1
    liveins: $r13, $r14
    $r13 = MOV64rm $rbp, 1, $noreg, -16, $noreg :: (load (s64) from %stack.1)
    $r14 = MOV64rm $rbp, 1, $noreg, -24, $noreg :: (load (s64) from %stack.0)
    renamable $rax = MOV64rr $r13, implicit-def $rax
    CMP32ri renamable $eax, 50, implicit-def $eflags
    
    ; Set up some registers for PATCHPOINT
    $rdi = MOV64ri 1    ; Function call argument - should not be tracked
    $rsi = MOV64ri 2    ; Function call argument - should not be tracked 
    $rdx = MOV64ri 3    ; Function call argument - should not be tracked
    
    $r12 = MOV64ri 6    ; Register after stackmap start index - should be tracked
    $r15 = MOV64ri 7    ; Register after stackmap start index - should be tracked
    $rbx = MOV64ri 8    ; Register after stackmap start index - should be tracked
    
    PATCHPOINT 42, 16, 0, 3, 0, $rdi, $rsi, $rdx, 0, $rbp, -48, 3, renamable $r12, 3, renamable $r15, 3, renamable $r13, 3, renamable $r14, 3, renamable $rbx, 3, killed renamable $rax, 3, implicit-def dead early-clobber $r11 :: (load (s64) from %stack.0)
    
    JCC_1 %bb.1, 2, implicit $eflags

  bb.3:
  ; predecessors: %bb.2
    liveins: $rax
    RET64 $rax
